package com.triet12369.heartratemonitor;


import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.series.DataPoint;
import com.jjoe64.graphview.series.LineGraphSeries;

import java.util.Arrays;

import static com.triet12369.heartratemonitor.R.id.HeartVal;

public class MonitorFragment extends Fragment {
    int Cpause=0;
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        //returning our layout file
        //change R.layout.yourlayoutfilename for each of your fragments
        View rootView = inflater.inflate(R.layout.fragment_menu_monitor, container, false);

        GraphView graph = (GraphView) rootView.findViewById(R.id.graph);
        mSeries1 = new LineGraphSeries<>(generateData());
        graph.addSeries(mSeries1);
        graph.getGridLabelRenderer().setHighlightZeroLines(false); //remove highlight of zero lines

        graph.getGridLabelRenderer().setHorizontalLabelsVisible(false);// remove horizontal x labels and line
//        graph.getGridLabelRenderer().setVerticalLabelsVisible(false);
        graph.getViewport().setMinX(0);
        graph.getViewport().setMaxX(510);
        graph.getViewport().setMinY(minInt(DemoData)-10);
        graph.getViewport().setMaxY(maxInt(DemoData)+10);
//        graph.getViewport().setMinY(-2);
//        graph.getViewport().setMaxY(2);
        graph.getViewport().setYAxisBoundsManual(true);
        graph.getViewport().setXAxisBoundsManual(true);
//        int[] a=findpeaksloc(DemoData);
        //double RR=RRCal(DemoData);
//        TextView commentMessage = (TextView) rootView.findViewById(R.id.comment);
//        commentMessage.setText(Comment(heartVal));
        TextView heartValue = (TextView) rootView.findViewById(HeartVal);
//        int[] a=findpeaksloc(DemoData,round(0.2*fs));
//        double[] b={1,4,1.5,3,5};
//        double a=imaxDouble(b);

        heartValue.setText("" + heartVal);

//        final ToggleButton toggle = (ToggleButton) rootView.findViewById(pause);
//        toggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
//            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
//                toggle.toggle();
//                if (isChecked) {
//                    // The toggle is enabled
//                    toggle.setTextOff("PAUSE");
//                    toggle.setChecked(true);
//                    Cpause=1;
//                } else {
//                    // The toggle is disabled
//                    toggle.setTextOn("RESUME");
//                    toggle.setChecked(false);
//                   Cpause=0;
//                }
//            }
//        });
//        TextView Cp = (TextView) rootView.findViewById(R.id.display_name);
//        Cp.setVisibility(View.GONE);
//        float[] l=lowPass(DemoData,2);
//        heartValue.setText(""+QRS(l,2));
        return rootView;
    }
//    TextView textView;
//    public void updateInfo(String name){
//    textView.setText("Welcome" + name);
//        textView.setVisibility(View.VISIBLE);
//    }
    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        //you can set the title for your toolbar here for different fragments different titles
        getActivity().setTitle("Heart Rate Monitor");
    }

//double[] DemoData=getActivity().findViewById()
//    public void onToggleClicked(View view) {
//        // Is the toggle on?
//        boolean on = ((ToggleButton) view).isChecked();
//        if (on) {
//            pause=1;
//        } else {
//            pause=0;
//        }
//    }
    private final Handler mHandler = new Handler();
    private Runnable mTimer1;
    private LineGraphSeries<DataPoint> mSeries1;
    int j=0;
    @Override
    public void onResume() {
        super.onResume();
        mTimer1 = new Runnable() {
            @Override
            public void run() {
                if (j<(DemoData.length-count-11)){
                j=j+10;} else {mHandler.removeCallbacks(mTimer1);}
                mSeries1.resetData(generateData());
                mHandler.postDelayed(this, 50);
            }
        };
        mHandler.postDelayed(mTimer1, 50);
    }

//    @Override
//    public void onPause() {
//        if (Cpause==1){
//        mHandler.removeCallbacks(mTimer1);
//        super.onPause();}
//    }

    int[] DemoData={825,825,825,825,825,825,825,821,827,827,830,829,830,826,824,820,819,818,815,819,817,821,821,825,826,826,825,823,823,821,822,826,820,822,821,824,826,825,822,823,821,825,823,823,827,827,828,832,836,832,836,835,835,836,834,837,841,843,846,849,852,851,852,855,854,854,856,860,863,869,873,879,883,887,890,890,892,894,898,903,904,912,918,920,925,929,930,934,934,935,937,939,941,947,950,951,951,954,950,945,940,935,930,926,919,914,913,906,901,894,887,876,871,864,858,855,854,851,849,850,851,850,846,843,839,838,835,834,837,838,838,839,838,837,836,838,834,837,834,833,832,835,840,841,843,840,841,838,837,835,840,841,843,844,843,848,849,850,850,848,848,843,844,842,844,847,851,854,854,855,853,851,849,846,845,845,846,847,849,849,852,850,848,846,844,841,838,838,843,840,848,846,847,843,847,842,844,840,839,840,839,840,840,843,844,841,840,837,835,836,831,834,832,836,836,839,842,841,840,841,840,838,836,836,837,841,841,843,845,843,844,842,842,842,839,842,846,851,855,860,864,866,870,870,873,875,880,889,896,903,908,914,912,909,902,903,899,893,891,883,875,868,854,849,842,842,839,837,834,835,834,833,832,832,835,837,836,835,834,833,831,828,830,829,829,834,833,835,838,835,830,833,834,833,831,829,826,823,824,830,846,873,910,957,1016,1088,1157,1213,1247,1265,1259,1232,1188,1114,1018,917,843,807,810,831,858,877,886,882,873,859,848,840,833,833,831,833,836,837,835,838,832,835,831,830,830,828,828,827,828,828,830,831,829,830,828,829,827,824,821,826,830,830,832,832,836,834,834,829,830,831,834,832,833,838,837,841,843,843,844,842,842,840,844,845,847,847,851,857,859,860,862,861,863,862,864,868,869,875,879,887,891,894,894,894,894,902,906,913,917,924,927,933,938,943,943,945,945,947,949,950,952,956,957,963,962,955,951,948,943,939,933,927,921,917,915,908,907,899,895,887,880,877,871,867,864,863,863,863,858,859,856,850,849,846,845,846,842,844,844,843,846,842,844,842,841,841,838,839,842,845,846,850,851,850,849,847,846,846,850,853,851,854,853,853,854,853,854,852,854,858,870,887,914,942,975,1004,1039,1071,1113,1150,1191,1236,1276,1312,1346,1371,1389,1401,1406,1405,1399,1389,1376,1359,1339,1330,1326,1334,1336,1332,1331,1313,1291,1264,1237,1202,1166,1120,1060,989,920,862,829,815,811,814,814,811,802,793,780,775,770,770,768,764,760,758,751,
        750,746,741,743,739,739,735,737,735,728,726,723,716,717,713,715,711,711,710,710,709,707,707,706,704,701,700,698,698,695,701,702,700,701,702,703,698,696,689,684,679,675,673,668,661,647,640,627,613,600,588,579,574,570,565,564,563,562,561,563,565,567,567,574,580,588,595,599,605,614,621,625,636,648,659,670,684,698,709,721,727,734,740,744,750,758,762,767,773,778,778,785,785,785,782,780,777,778,780,779,781,782,789,788,787,782,786,784,783,782,782,782,783,787,785,792,789,791,790,790,789,789,791,789,793,795,792,794,796,793,793,794,796,795,793,792,797,797,800,799,798,799,798,797,795,794,795,797,799,800,804,805,804,804,802,800,797,797,797,799,799,805,802,805,800,796,801,798,804,800,798,798,800,802,804,806,804,805,805,804,799,800,798,801,803,804,807,809,807,806,807,806,804,806,805,804,808,808,807,810,808,807,809,810,808,806,807,808,809,810,811,813,814,814,812,811,809,807,807,809,808,809,809,812,812,814,813,812,810,809,811,810,810,813,814,814,815,813,813,812,812,811,810,810,809,811,814,816,816,815,814,813,810,812,808,808,810,811,813,817,816,815,817,814,813,812,813,811,814,811,813,817,815,815,817,816,816,815,815,816,815,819,822,823,820,821,819,818,814,813,811,815,820,817,819,821,818,823,820,819,818,818,816,817,817,821,818,824,825,825,823,822,817,816,815,817,818,822,821,824,824,823,822,820,820,817,814,815,814,815,818,822,824,822,822,821,819,815,815,816,820,821,821,822,822,824,825,822,821,820,819,820,821,822,827,828,827,826,825,821,821,820,822,821,826,827,830,834,838,838,841,843,845,849,852,851,858,863,868,876,884,891,898,899,893,889,883,884,887,886,883,880,870,860,847,833,825,820,821,820,820,821,827,828,824,825,820,817,818,817,818,818,817,822,824,826,825,825,821,819,812,806,808,815,831,864,909,970,1041,1115,1180,1230,1253,1252,1222,1161,1072,964,873,816,801,817,840,861,870,866,850,841,828,824,823,823,823,821,820,816,818,816,812,815,813,815,814,815,818,819,815,813,811,810,812,813,813,814,815,819,815,811,811,812,810,808,810,812,812,813,817,819,818,819,816,817,815,816,819,819,823,822,825,826,827,829,827,827,827,826,830,832,834,841,842,842,847,847,847,849,851,852,854,857,865,867,871,875,880,882,885,886,889,892,894,900,900,909,915,915,917,920,921,922,923,925,927,930,932,933,934,932,928,924,919,914,910,905,901,898,894,
        889,885,884,876,871,868,862,862,857,856,854,854,856,857,856,854,853,849,845,842,841,841,843,846,850,848,848,849,847,846,848,845,844,845,847,850,852,854,856,854,851,854,852,853,852,852,850,854,853,855,856,851,852,853,854,853,849,849,849,852,855,856,857,853,851,849,846,844,846,845,846,844,845,848,852,847,847,844,843,840,839,839,842,839,838,840,838,842,838,840,835,833,835,833,834,834,836,840,841,839,836,835,833,832,834,833,833,835,833,834,836,837,836,834,832,832,831,832,831,835,841,838,837,835,838,833,835,835,833,837,834,835,837,839,840,840,842,841,840,841,843,846,854,858,862,866,870,871,872,877,879,882,890,897,904,907,908,906,905,902,901,901,900,894,887,878,871,861,851,845,840,836,835,832,832,831,830,829,831,832,834,832,832,832,832,831,830,830,828,830,830,830,834,838,835,839,838,835,835,828,820,816,821,832,852,885,928,979,1042,1103,1167,1215,1247,1258,1257,1243,1209,1152,1070,971,883,822,807,814,844,870,882,884,880,870,855,843,841,839,837,835,835,836,836,837,837,839,837,835,834,833,831,829,824,827,828,827,830,831,831,829,828,830,830,828,826,831,830,832,835,836,836,835,835,834,832,832,832,834,835,835,838,842,842,842,839,842,840,837,840,841,843,848,850,852,854,851,853,857,856,859,862,861,868,867,873,877,882,882,883,889,890,894,895,899,903,906,911,917,922,924,927,927,929,930,929,936,939,944,946,951,951,953,954,954,952,950,946,945,942,939,936,934,926,922,914,905,900,893,888,884,881,875,875,871,869,866,864,858,856,854,850,848,846,845,846,850,849,846,847,847,842,840,841,839,840,842,842,844,844,844,841,840,839,838,839,839,841,844,848,848,851,851,846,846,844,840,844,846,846,846,849,848,849,852,852,848,848,844,845,840,843,846,850,848,849,847,846,843,843,844,841,840,840,843,841,841,846,839,839,838,838,837,835,837,839,838,840,840,842,842,838,835,833,832,831,833,832,835,836,837,836,836,838,835,833,833,831,834,833,834,832,835,834,833,835,833,831,827,826,831,831,832,833,832,836,835,836,836,838,836,840,840,844,847,856,857,861,866,864,867,874,877,886,894,894,896,896,895,896,894,891,892,890,880,877,867,858,847,838,835,832,829,829,824,820,821,821,820,821,822,822,822,822,821,822,821,817,817,818,816,816,816,821,822,823,826,825,824,822,816,815,809,805,809,825,850,888,938,1003,1075,1142,1200,1235,1246,1236,1206,1147,1063,
        965,872,810,787,797,823,848,861,865,856,847,835,826,822,819,820,817,816,813,813,813,814,815,815,816,813,814,813,811,808,810,809,812,808,810,810,811,810,811,812,811,809,806,809,810,809,813,816,817,815,813,813,812,812,808,813,812,817,821,821,824,825,823,822,821,822,823,827,829,832,836,841,842,843,844,845,848,848,846,848,854,861,867,874,877,881,883,883,886,887,890,892,898,897,906,912,913,918,920,920,922,922,922,924,926,928,930,931,932,928,925,918,915,907,903,897,894,890,882,880,875,869,861,856,851,844,840,840,835,835,832,829,829,826,823,823,818,815,811,812,815,817,818,816,818,814,812,812,812,810,810,811,812,815,817,818,821,822,821,816,816,818,817,814,819,822,820,823,825,828,826,823,822,821,823,821,822,825,827,829,829,831,831,825,825,824,823,820,823,823,824,829,827,823,824,820,820,818,822,822,821,822,824,825,822,823,821,818,819,815,812,814,816,816,818,817,821,818,817,816,817,814,812,809,812,814,815,816,818,818,817,815,814,812,811,809,812,814,817,817,821,822,825,825,827,827,830,834,835,839,842,846,851,852,859,862,870,876,880,882,885,884,883,880,885,882,880,873,864,856,844,831,821,815,816,813,812,815,813,814,809,807,808,808,808,810,811,809,810,808,806,807,804,807,804,803,807,809,813,811,814,813,812,807,800,800,806,826,857,909,973,1053,1131,1197,1237,1257,1246,1204,1129,1021,909,824,782,782,807,833,853,858,853,837,826,817,814,807,813,812,819,817,815,814,813,806,806,807,807,808,808,810,813,811,810,812,808,806,806,806,807,810,810,814,815,813,811,811,816,812,813,814,811,816,818,820,819,822,826,825,826,826,827,828,830,833,837,837,842,843,843,846,844,841,843,848,855,860,861,869,871,875,882,879,885,889,896,899,903,910,914,918,922,927,930,930,934,935,940,939,941,942,945,945,950,944,942,934,927,924,918,907,901,900,894,891,883,876,871,864,858,854,852,847,842,843,841,840,838,838,833,832,830,829,827,825,824,828,826,829,832,831,828,827,826,825,828,827,827,831,835,835,839,839,836,834,833,833,837,835,835,838,841,841,842,841,840,838,836,840,839,837,841,843,845,847,846,844,844,843,843,841,838,839,838,841,840,841,840,841,840,839,838,839,835,833,833,833,836,840,840,835,835,837,835,834,831,832,831,835,834,836,839,835,834,830,831,830,830,826,826,832,829,835,834,834,832,833,831,826,829,829,829,832,832,835,836,837,838,835,835,
        831,834,832,833,840,843,848,852,855,854,857,858,861,860,861,868,875,879,887,898,903,906,906,904,900,897,891,895,896,895,894,882,873,860,849,839,832,825,820,822,826,830,832,830,829,829,826,822,822,821,819,822,823,821,825,826,828,827,826,826,826,826,826,827,825,827,827,826,822,817,814,817,827,848,882,934,995,1069,1144,1208,1250,1265,1264,1241,1193,1114,1015,910,837,800,805,825,855,873,875,869,859,842,832,826,826,830,829,834,832,831,833,830,823,823,820,823,824,825,824,826,826,822,825,822,821,821,819,821,824,826,825,826,826,824,825,822,818,818,823,821,825,826,830,833,833,833,833,829,831,830,830,830,837,839,840,839,837,839,841,842,842,843,845,844,849,853,859,862,864,867,869,871,871,871,875,880,885,890,897,904,906,909,912,916,917,921,923,928,932,937,940,944,948,953,950,951,950,949,947,944,940,936,932,930,923,917,909,898,896,886,881,874,873,869,868,866,861,856,854,845,842,839,838,838,836,837,840,841,839,838,837,837,837,834,831,830,831,832,832,838,836,837,837,837,834,835,835,837,836,839,839,841,841,841,842,839,840,835,834,842,851,865,886,913,943,968,997,1025,1059,1096,1135,1180,1224,1267,1303,1338,1367,1390,1404,1411,1412,1413,1407,1400,1387,1371,1359,1350,1344,1345,1346,1338,1330,1312,1284,1254,1221,1180,1130,1060,982,904,848,810,798,795,798,804,800,795,786,779,773,764,759,753,749,745,744,741,739,738,733,733,732,731,729,725,720,717,715,712,712,712,710,711,709,711,709,709,706,706,706,703,700,703,703,707,709,704,710,707,703,697,689,687,682,679,680,675,664,653,642,628,617,604,590,581,575,569,568,561,558,560,557,554,552,551,549,550,554,561,566,572,579,585,591,595,602,616,627,640,652,666,672,690,699,708,716,725,733,741,748,754,758,764,770,770,773,777,778,779,779,780,772,776,781,783,780,783,783,784,782,781,782,781,779,784,783,785,786,790,790,789,790,788,786,787,788,789,789,793,795,798,801,800,797,797,795,796,797,795,798,798,799,801,803,801,805,805,802,801,802,801,804,800,805,808,807,808,808,809,807,804,803,806,804,808,809,812,814,817,815,813,812,810,811,808,808,812,815,817,816,816,816,815,812,814,815,815,814,818,817,821,821,820,819,820,818,818,820,819,817,821,822,823,825,824,822,822,821,819,818,819,821,822,828,829,832,827,827,823,825,822,818,823,822,825,829,831,832,833,830,826,827,823,827,827,830,828,833,834,834,
        832,833,828,828,827,827,826,830,832,832,835,834,834,834,832,831,826,829,830,832,832,831,838,835,834,833,831,831,829,829,833,833,836,833,834,834,835,834,833,832,831,830,832,832,833,837,835,837,839,838,837,835,834,831,829,834,837,834,839,841,839,839,838,838,837,835,837,837,836,840,843,845,843,843,842,840,837,832,833,839,840,840,841,843,847,844,845,843,840,841,838,840,840,840,841,847,847,847,842,839,837,841,843,843,845,844,848,847,846,850,846,843,842,838,838,839,845,846,850,851,850,849,849,847,846,845,847,849,854,859,862,869,869,871,868,869,875,880,886,893,903,913,920,920,920,915,915,908,909,909,909,907,903,895,887,875,861,856,848,846,842,843,844,845,845,846,848,847,847,846,845,841,842,840,842,843,847,844,843,847,845,837,831,828,834,849,877,919,972,1038,1111,1183,1239,1279,1293,1288,1262,1211,1133,1033,932,856,824,828,852,875,890,891,885,868,858,847,842,838,843,845,846,844,845,842,839,837,834,835,838,837,839,842,841,837,837,837,832,827,832,833,833,837,837,839,839,838,835,833,828,830,833,834,836,837,839,840,838,840,839,835,837,836,837,841,841,845,847,849,850,849,852,851,848,850,854,854,862,862,868,870,870,872,871,874,871,876,878,885,890,894,900,903,905,909,910,911,913,915,917,921,928,929,931,937,939,942,942,940,944,943,948,952,955,956,957,960,958,958,954,950,946,941,935,934,929,927,922,920,915,908,903,898,894,887,882,879,879,878,878,877,873,869,868,865,862,863,864,865,863,864,866,868,865,866,866,864,864,860,861,865,866,868,870,869,869,870,868,866,867,867,866,868,871,870,873,872,869,870,869,867,866,865,863,864,866,868,869,868,867,867,864,862,859,859,856,859,862,864,866,865,864,858,856,854,855,854,855,856,856,859,860,859,858,855,848,848,848,846,846,845,844,846,850,847,850,850,846,845,843,844,842,844,842,846,848,850,848,849,846,847,841,843,839,843,848,848,847,849,848,848,846,844,842,840,840,845,846,847,849,846,846,847,848,845,847,847,845,854,858,863,868,872,874,875,879,880,880,884,886,893,906,912,920,925,921,917,911,910,911,907,909,906,905,903,894,883,873,863,852,845,846,841,844,841,846,843,846,846,842,838,835,836,835,836,835,839,839,841,842,843,842,842,844,838,838,836,830,829,829,838,854,884,924,987,1055,1131,1200,1250,1280,1282,1270,1231,1166,1074,967,881,826,810,829,853,880,891,890,882,870,859,850,846,843,
        841,840,844,841,840,842,845,845,844,841,840,837,836,837,836,834,834,838,838,843,844,843,839,840,838,835,836,836,837,841,842,842,846,845,844,840,841,839,840,838,836,844,848,851,852,853,853,853,854,852,855,851,856,861,860,864,869,869,873,871,877,876,878,882,883,890,891,900,905,911,912,916,917,917,921,924,929,935,942,948,952,954,958,955,957,960,958,960,959,965,962,964,962,959,955,946,943,937,933,924,921,917,911,905,902,897,890,883,879,874,869,867,865,864,862,864,860,855,856,852,847,850,851,847,848,849,853,852,854,850,852,853,851,851,842,843,845,847,854,853,856,855,858,852,852,849,850,846,849,854,854,857,858,857,856,857,855,852,852,847,851,854,855,855,858,858,856,855,853,851,851,849,850,852,856,856,856,856,852,848,845,845,846,845,844,846,849,851,851,850,845,846,843,843,842,841,843,846,847,849,849,849,843,847,845,842,843,842,842,848,849,848,846,846,842,842,840,843,840,841,841,843,846,849,853,855,857,859,860,861,864,865,870,873,879,881,891,898,907,907,912,910,907,906,906,908,911,909,906,898,885,873,861,849,843,836,834,837,840,838,842,840,838,838,832,833,829,828,832,834,835,835,837,837,836,832,830,832,830,830,827,829,830,828,823,822,824,837,856,887,929,990,1063,1139,1203,1251,1277,1281,1264,1221,1158,1071,962,872,812,796,813,841,869,884,883,870,857,843,836,827,827,831,834,834,836,833,831,830,829,826,822,823,821,826,828,829,832,829,828,828,825,823,822,821,818,823,825,828,829,826,826,826,826,824,825,824,822,825,827,831,830,827,829,830,829,829,830,830,830,832,840,845,848,850,851,851,848,848,851,851,852,858,862,865,873,872,874,876,881,883,888,892,897,902,911,914,918,919,922,927,929,929,932,933,938,942,945,946,952,950,949,948,942,939,932,930,926,925,917,913,910,904,897,888,882,875,868,865,860,857,856,855,850,850,843,840,835,834,833,832,829,830,832,834,833,833,833,831,830,825,823,824,827,824,828,831,833,830,830,832,828,829,828,828,827,831,836,838,841,838,841,838,836,834,835,836,835,836,837,837,842,839,840,837,838,835,836,832,834,834,838,836,837,840,837,835,833,834,831,831,830,832,829,831,832,834,832,830,829,826,825,826,826,828,829,829,833,829,828,827,825,826,827,824,825,826,826,826,826,827,827,825,822,822,823,826,826,830,837,842,847,852,854,854,856,858,862,864,874,882,890,894,896,896,891,888,886,887,882,878,869,861,
        851,843,837,831,825,823,819,817,815,816,819,817,817,817,820,820,817,814,814,813,809,811,812,812,811,817,815,819,816,815,813,813,813,813,812,810,809,807,812,819,836,868,909,966,1034,1106,1172,1223,1253,1262,1250,1215,1150,1062,956,863,802,784,799,827,858,873,874,863,848,838,827,822,818,820,820,822,823,825,824,824,821,819,816,817,816,818,816,820,820,820,821,822,819,821,817,815,816,813,815,819,819,823,825,827,826,824,822,819,818,818,819,822,828,828,827,830,827,829,828,828,830,830,831,830,835,839,840,841,842,
        843,840,843,845,848,851,855,858,862,869,871,873,873,875,878,883,884,891,894,900,905,913,917,922,920,927,925,927,931,936,939,944,949,952,956,958,955,955,954,952,952,950,947,944,945,942,934,929,922,917,907,901,895,890,885,881,878,875,870,868,866,859,853,848,845,843,847,847,846,845,843,844,840,839,837,836,837,837,836,834,834,839,838,838,838,837,834,834,836,837,841,842,843,846,847,846,847,844,845,844,843,847,846,848,851,851,851,853,852,851,848,846,847,847,846,852,851,856,856,854,855,852,851,848,847,849,848,849,848,850,852,846,846,845,845,846,843,843,846,846,844,848,846,845,845,845,846,843,840,839,841,844,845,847,847,844,844,840,844,841,836,841,840,843,844,847,846,844,842,844,840,839,839,841,839,843,845,846,847,847,845,845,841,844,846,849,857,862,866,869,871,872,875,877,878,882,888,897,905,911,916,914,915,909,907,905,906,901,897,893,884,874,865,856,846,842,834,833,834,832,831,833,835,835,834,836,837,836,833,830,829,829,829,830,832,832,832,832,836,835,838,831,832,833,830,825,821,826,833,850,879,925,981,1053,1129,1192,1243,1265,1271,1253,1213,1153,1054,951,865,816,810,828,854,872,885,881,870,858,849,839,836,836,834,833,833,833,831,833,833,831,830,827,828,826,829,828,828,827,829,827,832,835,834,829,828,829,828,827,825,829,826,831,832,835,835,832,834,833,832,831,830,834,833,837,838,842,845,843,839,842,840,842,844,842,849,853,858,862,866,868,869,865,866,872,876,877,880,886,891,901,903,903,908,910,915,916,922,923,930,939,943,951,951,953,955,954,956,959,956,957,961,965,963,962,958,953,946,939,931,928,921,912,906,900,897,895,888,883,879,874,866,862,859,856,855,855,856,853,852,848,844,844,842,839,838,836,839,839,843,845,845,843,844,842,839,838,838,838,841,844,846,841,843,849,850,849,847,846,841,843,843,846,848,856,867,884,904,932,962,993,1026,1065,1100,1142,1188,1232,1276,1319,1351,1376,1397,1406,1413,1415,1413,1413,1405,1393,1376,1359,1349,1342,1344,1342,1334,1319,1300,1271,1239,1200,1156,1094,1018,943,877,831,808,805,801,809,811,808,805,793,782,774,765,761,758,757,756,755,749,748,749,748,746,742,737,734,731,733,734,736,737,740,741,742,739,740,737,734,737,740,739,743,747,748,746,741,735,729,722,720,716,709,699,689,678,665,651,638,625,610,600,597,593,589,588,583,578,577,576,571,565,559,555,551,553,551,554,554,555,558,562,563,567,573,579,584,589,598,608,618,627,636,648,657,669,679,690,698,704,720,731,739,749,754,762,766,774,774,775,776,779,779,782,785,786,787,788,785,786,783,784,782,780,783,783,782,782,789,789,789,786,784,783,781,782,788,787,790,792,796,797,796,792,792,792,792,791,796,797,797,801,800,804,806,803,803,802,801,800,800,801,807,806,809,807,808,806,807,804,804,802,804,808,810,812,812,811,811,810,807,805,806,807,808,809,813,812,814,815,815,812,813,811,809,809,813,815,815,814,816,817,820,818,818,816,814,815,815,818,819,818,820,824,820,819,817,817,814,816,816,816,821,822,825,828,825,823,822,818,817,818,818,820,819,825,825,826,828,828,824,821,819,816,819,822,823,824,831,830,831,827,824,824,827,826,826,828,831,832,832,834,831,832,832,830,828,828,829,828,829,834,834,836,835,833,833,831,830,831,830,834,839,836,837,838,837,835,832,835,832,830,831,834,836,837,841,842,839,839,840,840,836,837,836,839,840,837,840,844,843,842,841,840,839,840,840,838,841,843,844,846,843,848,848,844,843,842,840,842,844,846,846,846,850,845,844,845,843,842,843,842,844,845,846,852,849,849,846,843,846,844,844,845,848,846,850,850,849,849,847,845,845,849,847,847,853,856,856,860,862,863,867,870,873,877,877,878,883,888,896,908,915,922,923,917,913,909,911,913,915,917,918,915,905,892,880,868,860,851,845,847,848,849,853,852,854,851,848,844,845,842,840,846,846,847,850,851,848,846,844,843,844,840,837,832,837,849,867,899,942,999,1064,1136,1200,1257,1287,1298,1290,1266,1216,1145,1049,947,867,828,821,846,871,894,903,895,885,876,859,853,845,843,845,846,845,840,843,845,846,844,844,842,841,840,839,835,836,832,833,837,837,839,839,841,839,835,835,835,836,837,839,840,842,840,843,843,841,837,835,838,836,838,842,844,845,851,850,848,849,846,847,846,848,847,850,855,858,858,857,855,855,860,862,860,859,864,873,876,882,886,888,891,896,894,897,901,901,906,912,917,920,925,927,933,935,935,937,941,942,946,952,955,957,964,965,968,965,964,964,963,959,959,954,954,948,946,942,933,927,922,916,910,903,901,896,896,889,892,888,881,880,875,873,871,867,869,867,865,867,868,867,866,866,866,868,865,863,865,866,867,870,871,869,870,868,867,868,867,868,867,869,873,876,875,876,874,874,872,870,867,869,869,875,876,878,879,880,880,876,869,870,871,868,866,869,871,872,873,872,869,869,864,864,867,862,863,864,864,866,867,867,865,862,860,859,857,854,852,857,859,862,862,863,858,856,855,855,853,851,853,855,856,857,859,858,858,857,856,856,854,854,852,856,854,858,859,856,857,854,853,851,851,852,852,855,857,856,856,857,857,856,854,855,856,858,866,869,875,879,882,886,888,889,890,897,907,913,920,924,926,922,922,921,920,918,912,906,897,887,877,868,859,854,855,852,847,844,841,843,846,843,845,844,844,845,844,843,843,841,840,840,837,837,839,840,844,846,847,849,849,848,842,838,830,826,834,852,885,931,992,1065,1142,1213,1259,1286,1287,1263,1217,1141,1039,937,859,819,816,840,866,884,892,888,876,862,854,846,846,845,847,846,844,843,840,834,839,841,843,841,841,843,844,839,837,837,837,836,835,840,841,840,838,840,836,837,834,832,830,833,834,837,837,839,844,843,845,840,839,838,838,838,841,842,844,846,852,853,853,855,853,852,856,853,858,861,867,868,873,874,875,882,881,884,887,893,893,897,903,909,917,925,925,927,931,934,934,934,937,945,949,955,954,954,957,955,958,959,958,957,953,955,954,952,948,945,939,933,925,914,907,900,895,891,882,882,881,878,870,866,861,855,851,847,847,845,846,846,848,845,843,843,841,840,838,837,835,836,839,839,844,839,838,842,842,841,840,841,841,837,844,845,847,847,848,843,843,845,843,843,847,851,851,852,857,855,856,853,849,845,848,845,843,847,850,850,848,852,849,848,850,847,846,846,843,847,849,845,849,850,849,847,843,840,836,839,840,840,843,844,848,847,845,844,843,841,839,838,838,837,839,841,843,844,845,841,839,840,837,834,833,837,840,842,845,846,846,847,848,850,851,852,858,859,863,868,872,872,876,878,883,886,895,900,907,908,909,908,907,908,904,907,903,900,893,883,876,866,858,848,844,841,837,837,836,832,832,833,832,833,833,830,834,831,831,830,828,830,829,831,830,833,837,840,841,837,835,834,827,824,818,821,824,838,863,898,947,1008,1078,1151,1211,1255,1271,1270,1246,1194,1112,1006,907,838,804,810,834,860,875,877,869,858,850,841,839,838,835,835,833,832,832,831,830,831,835,836,837,837,834,833,831,831,828,824,826,827,831,828,829,827,833,833,832,832,829,832,832,830,837,835,839,840,839,841,840,838,836,833,837,835,843,846,851,853,847,847,845,851,850,852,854,858,860,866,868,871,872,873,875,873,875,879,881,886,893,896,900,907,909,911,916,917,922,923,926,930,939,940,945,948,949,950,948,952,953,955,955,958,961,961,961,959,953,944,939,929,928,920,914,908,902,899,893,889,885,875,871,867,864,859,857,856,852,852,856,855,853,848,846,844,843,845,842,839,843,843,845,845,844,843,843,837,834,836,837,836,840,845,845,847,848,847,845,844,844,846,845,845,848,849,851,854,855,856,853,851,852,853,853,853,856,857,860,859,858,858,855,855,851,852,853,851,855,855,856,855,854,851,849,848,846,842,844,848,848,846,848,852,850,848,847,844,843,841,841,840,843,846,844,844,845,843,844,841,839,837,840,841,842,842,845,845,844,843,843,838,834,832,835,839,840,841,844,845,844,844,841,838,838,844,841,844,851,861,867,868,873,875,875,876,878,881,887,893,904,913,919,917,913,909,907,904,903,903,900,900,895,888,879,865,853,841,842,840,837,833,834,834,837,834,835,836,835,833,830,829,830,827,829,828,831,833,831,830,830,831,830,829,831,832,830,831,834,827,824,823,825,838,865,901,950,1018,1092,1169,1234,1277,1294,1292,1262,1208,1120,1018,913,838,807,812,839,869,883,888,882,869,853,840,834,832,830,831,834,835,838,835,834,834,833,831,827,827,827,829,831,833,833,836,835,834,830,831,829,826,827,831,831,832,833,836,836,834,833,833,832,832,834,833,835,836,838,837,838,839,840,840,839,841,844,846,847,853,856,855,859,861,856,857,857,858,867,869,874,878,882,888,892,897,899,900,901,906,912,914,923,925,931,940,942,945,947,949,952,952,957,960,965,968,970,970,969,972,968,962,958,954,950,948,942,937,930,927,919,914,906,899,893,885,880,878,875,873,869,869,865,863,860,857,853,850,848,849,851,852,851,852,851,849,849,846,845,846,845,842,848,848,853,852,853,853,850,848,845,846,848,849,851,855,857,858,857,857,857,857,853,848,849,852,854,857,857,860,859,859,856,855,856,853,849,848,851,850,855,856,852,856,853,851,851,849,847,849,850,846,856,853,850,853,850,848,847,847,847,848,849,849,849,850,848,844,845,846,842,843,841,844,845,846,850,849,849,846,847,844,843,840,839,839,844,847,845,849,848,848,847,845,843,843,844,845,848,854,852,855,854,859,860,861,862,868,867,872,877,882,886,892,897,905,909,909,915,912,910,908,909,912,912,911,904,896,886,871,857,849,842,839,839,842,843,845,841,839,838,838,834,834,832,833,834,835,835,839,839,834,833,832,831,830,829,830,836,838,841,839,838,831,826,820,820,836,857,895,948,1015,1090,1162,1221,1262,1278,1269,1238,1182,1091,986,884,818,798,807,836,864,879,882,873,855,846,839,834,835,838,839,839,834,836,830,828,826,826,825,829,830,831,833,828,826,826,822,822,823,824,826,827,827,829,834,830,830,828,826,820,824,825,827,827,832,834,837,836,834,836,831,831,832,834,835,841,841,848,851,852,855,851,849,849,853,855,858,860,866,867,874,878,881,882,888,888,892,893,902,909,913,922,926,930,931,931,935,936,941,943,943,949,953,957,961,962,960,959,958,953,953,947,943,940,937,930,926,917,910,900,895,889,879,874,869,869,862,860,858,854,851,848,844,842,838,839,839,838,840,842,842,839,837,836,833,833,830,829,830,833,835,835,836,837,837,835,829,829,831,832,833,837,837,835,835,837,835,835,834,836,842,841,839,840,845,844,845,846,847,846,840,842,840,837,838,843,846,845,849,846,844,845,842,839,839,837,837,839,839,839,842,843,839,837,835,833,832,831,829,832,834,840,842,841,839,839,835,835,836,831,832,831,831,831,836,835,835,832,830,827,829,831,831,835,837,841,845,848,847,852,852,853,855,855,861,864,869,876,886,893,899,903,902,900,900,895,895,893,893,893,889,877,869,858,848,836,833,826,828,828,829,830,831,827,826,823,823,820,818,817,820,822,825,825,828,825,826,820,821,822,823,820,821,822,824,828,825,818,817,820,824,838,865,905,953,1019,1094,1164,1219,1252,1264,1260,1233,1179,1101,1002,900,826,792,795,820,849,867,876,866,856,842,828,824,820,819,819,822,824,822,820,817,817,814,808,813,813,817,820,818,818,820,817,818,816,814,812,815,816,820,818,825,824,825,821,821,818,816,820,816,816,822,824,829,826,828,827,827,822,825,825,827,829,832,836,839,841,843,843,842,842,843,843,846,851,853,858,862,864,865,867,868,870,870,875,879,883,892,896,899,905,908,909,911,916,920,923,927,935,939,945,948,948,950,949,955,955,953,953,955,956,957,956,952,949,943,936,927,920,915,908,901,895,894,883,882,877,873,865,857,855,850,850,843,844,845,845,846,843,841,840,835,833,830,829,830,830,834,836,835,835,833,831,829,831,829,830,827,827,832,837,839,839,838,836,837,834,831,832,835,838,840,839,841,843,842,839,838,838,842,842,842,843,846,848,844,847,850,848,847,846,843,845,841,847,846,847,846,846,845,844,840,837,838,839,840,840,841,844,846,847,845,843,839,838,835,834,837,837,836,838,839,841,840,840,837,835,832,833,839,837,839,841,838,837,836,835,834,832,832,834,835,829,834,834,837,839,839,839,840,836,833,833,834,837,839,840,842,843,843,841,839,839,839,840,845,846,852,860,865,869,870,869,867,873,876,878,888,896,903,908,916,918,913,909,906,901,902,897,895,890,883,873,862,852,848,840,837,833,830,832,832,834,833,832,834,836,837,835,834,832,830,831,830,832,835,836,835,839,834,834,834,834,835,833,830,825,824,825,836,858,895,949,1016,1094,1170,1230,1270,1283,1276,1245,1186,1102,999,898,834,810,816,846,869,885,889,882,870,859,849,840,838,838,836,836,838,835,839,842,837,840,835,836,835,832,832,832,829,830,835,835,838,835,833,833,833,832,830,827,829,834,831,835,838,839,838,839,834,835,832,829,831,835,836,841,842,846,846,847,846,848,846,849,847,852,854,861,862,864,866,870,869,868,872,875,881,886,889,893,900,905,910,913,915,914,919,921,928,933,939,945,950,953,953,957,956,962,960,965,966,970,970,975,977,976,969,963,962,958,949,943,937,936,929,927,920,916,907,901,895,886,881,875,873,873,870,869,867
};
    int fs=200;
    double Rthreshold=1100;
//    int heartVal = (int)(60/RRCal(DemoData));
    int heartVal=round(60.0*fs/meanDouble(diffDouble(pan_tompkin(DemoData))));
//    int heartVal=(int) meanDouble(pan_tompkin(DemoData));

    String heartComment=" ";

    private String Comment(int heartVal) {

        if ((heartVal >= 60) && (heartVal <= 100)) {
            heartComment = "normal";
        } else if (heartVal > 100) {
            heartComment = "too high";
        } else if (heartVal < 60) {
            heartComment = "too low";
        }
        String Message="Your heart rate is " + heartComment;
        return Message;
    }
    int count = 500;
//    int[] d=diffDouble(DemoData);
    private DataPoint[] generateData() {
        DataPoint[] values = new DataPoint[count];
//        int j=0;
            int i=0;
        while (i<count){
            double x = i;
//            double f = mRand.nextDouble()*0.15+0.3;
//            int y;
//              y=DemoData[i+j];

            double y=DemoData[i+j];
            DataPoint v = new DataPoint(x, y);
            values[i] = v;
            i=i+1;
//            if (i==10){
//                j=j+1;
//            }
        }
        return values;
    }
//    Random mRand = new Random();

    //find max value of an array in Double
    private double maxDouble(double[] data) {
        double maxV=0;
        for (int i=0; i<data.length; i++){
            if (data[i]>=maxV){
                maxV=data[i];
            }
        }
        return maxV;
    }
    private double imaxDouble(double[] data) {
        double maxi=0;
        double maxV=0;
        for (int i=0; i<data.length; i++){
            if (data[i]>maxV){
                maxV=data[i];
                maxi=(double) i;
            }
        }
        return maxi;
    }
    private int maxInt(int[] data) {
        int maxV=0;
        for (int i=0; i<data.length; i++){
            if (data[i]>=maxV){
                maxV=data[i];
            }
        }
        return maxV;
    }
    private int minInt(int[] data) {
        int minV=data[0];
        for (int i=0; i<data.length; i++){
            if (data[i]<=minV){
                minV=data[i];
            }
        }
        return minV;
    }
    //find mean value of an array in Double
    private double meanDouble(double[] data){
        double sum=0;
        double meanV=0;
        for (int i=0;i<data.length;i++){
            sum=sum+data[i];
        }
        meanV=sum/data.length;
        return meanV;
    }
    private int meanInt(int[] data){
        int sum=0;
        int meanV=0;
        for (int i=0;i<data.length;i++){
            sum=sum+data[i];
        }
        meanV=sum/data.length;
        return meanV;
    }

    //diff function of matlab for double type array
    private int[] diffInt (int[] data){
        int[] d= new int[data.length-1];
        for (int i=1;i<data.length;i++){
            d[i-1]=data[i]-data[i-1];
        }
        return d;
    }
    private double[] diffDouble (double[] data){
        double[] d= new double[data.length-1];
        for (int i=1;i<data.length;i++){
            d[i-1]=data[i]-data[i-1];
        }
        return d;
    }
    //find function
    private int[] find (int[] data,int value){
        int[] f=new int[0];
        for (int i=0;i<data.length;i++){
            if (data[i]==value){
                f=Arrays.copyOf(f,f.length+1);
                f[f.length-1]=i;
            }
        }
        return f;
    }
    //sign function
    private int[] sign(double[] data){
        int[] s=new int[data.length];
        for (int i=0;i<s.length;i++){
            if (data[i]>0){s[i]=1;}
            else if (data[i]<0){s[i]=-1;}
            else {s[i]=0;}
        }
        return s;
    }
    //find location of peaks of an array with defined threshold
    private int[] findpeaksLoc(double[] data,int MPD){
        int[] trend=sign(diffDouble(data));
        int[] idx=find(trend,0);
        for (int i=idx.length-1;i>=0;i--){
            if (trend[Math.min(idx[i]+1,trend.length-1)]>=0){
                trend[idx[i]]=1;
            }
            else {
                trend[idx[i]]=-1;
            }
        }
        int[] idxp=find(diffInt(trend),-2);
        for (int i=0;i<idxp.length-1;i++){
            idxp[i]+=1;
        }

        int[] locs=new int[1];
        locs[0]=idxp[0];
        int j=0;
        for (int i=1;i<idxp.length;i++){
            if ((idxp[i]-idxp[j])>MPD){
            locs=Arrays.copyOf(locs,locs.length+1);
            locs[locs.length-1]=idxp[i];
            j=i;
            }
        }
        return locs;
    }
    private double[] findpeakVal(double[] data,int MPD){
        int[] locs=findpeaksLoc(data,MPD);
        double[] pks=new double[locs.length];
        for (int i=0;i<pks.length;i++){
            pks[i]=data[locs[i]];
        }
        return pks;
    }
    //conv function
    private int[] conv(int[]u,int[] v){
        int m=u.length;
        int n=v.length;
        int wl=m+n-1;
        int[] w= new int[wl];
        for (int k=1;k<wl;k++){
            int sum=0;
            int minj=Math.max(1,k+1-n);
            int maxj=Math.min(k,m);
            for (int j=minj;j<=maxj;j++){
                int temp=u[j-1]*v[k-j+1-1];
                sum=sum+temp;
            }
            w[k-1]=sum;
        }
        return w;
    }
    private double[] conv2(double[]u,int[] v){
        int m=u.length;
        int n=v.length;
        int wl=m+n-1;
        double[] w= new double[wl];
        for (int k=1;k<wl;k++){
            double sum=0;
            int minj=Math.max(1,k+1-n);
            int maxj=Math.min(k,m);
            for (int j=minj;j<=maxj;j++){
                double temp=(u[j-1]*v[k-j+1-1]);
                sum=sum+temp;
            }
            w[k-1]=sum;
        }
        return w;
    }
    private double[] conv3(double[]u,double[] v){
        int m=u.length;
        int n=v.length;
        int wl=m+n-1;
        double[] w= new double[wl];
        for (int k=1;k<wl;k++){
            double sum=0;
            int minj=Math.max(1,k+1-n);
            int maxj=Math.min(k,m);
            for (int j=minj;j<=maxj;j++){
                double temp=u[j-1]*v[k-j+1-1];
                sum=sum+temp;
            }
            w[k-1]=sum;
        }
        return w;
    }
    //filter function
    private int[] filter (int[] b,int[] a,int[] x){
        int na=a.length-1;
        int nb=b.length-1;
        int nx=x.length;
        int[] y=new int[nx];
        int B;
        int A;

        for (int n=1;n<=y.length;n++){
            int sumB=0;
            int sumA=0;
            for (int i=1;i<=nb+1;i++){
                int xi=n+1-i-1;
                int Xi;
                if ((xi<0)||(xi>x.length)){
                    Xi=0;
                }
                else {
                    Xi=x[xi];
                }
                B = b[i-1]*Xi;
                sumB=sumB+B;
            }
            for (int j=2;j<=na+1;j++){
                int yi=n+1-j-1;
                int Yi;
                if ((yi<0)||(yi>y.length)){
                    Yi=0;
                }
                else {
                    Yi=y[yi];
                }
                A = a[j-1]*Yi;
                sumA=sumA+A;
            }
            y[n-1]=(sumB-sumA)/a[0];
        }
        return y;
    }
    private int[] absIntInt (int[] array){
        int[] absA=new int[array.length];
        for (int i=0;i<absA.length;i++){
            if (array[i]>=0){absA[i]=array[i];}
            else {absA[i]=(-1)*array[i];}
        }
        return absA;
    }
    private double[] absDInt (double[] array){
        double[] absA=new double[array.length];
        for (int i=0;i<absA.length;i++){
            if (array[i]>=0){absA[i]=array[i];}
            else {absA[i]=(-1)*array[i];}
        }
        return absA;
    }
    private int absIntNum (int a){
        int abs;
        if (a>=0){abs=a;}
        else {abs=-1*a;}
        return abs;
    }
    private double absDoubleNum (double a){
        double abs;
        if (a>=0){abs=a;}
        else {abs=-1*a;}
        return abs;
    }
    //round
    private int round(double x){
        int r=0;
        if ((x-(int)x)>=0.5){
            r=(int)x+1;
        }
        else {
            r=(int)x;
        }
        return r;
    }

    //ones
    private int[] ones(int column){
        int[] array=new int[column];
        for (int i=0;i<column;i++){
            array[i]=1;
        }
        return array;
    }


    //band pass filter
    private double[] pan_tompkin (int[] ecg){
        //low pass
        int[] bl={1,0,0,0,0,0,-2,0,0,0,0,0,1};
        int[] al={1,-2,1};
        int[] xl={1,0,0,0,0,0,0,0,0,0,0,0,0};//[1 zeros(1,16)]
        int[] h_l=filter(bl,al,xl);
        int[] ecg_l_temp=conv(ecg,h_l);
        int max_ecg_l_temp=maxInt(absIntInt(ecg_l_temp));
        double[] ecg_l=new double[ecg_l_temp.length];
        for (int i=0;i<ecg_l.length;i++){
            ecg_l[i]=(double) ecg_l_temp[i]/max_ecg_l_temp;//low pass data
        }
        int delay=6;

        //high pass
        int[] bh={-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
        int[] ah={1,-1};
        int[] xh={ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};//[1 zeros(1,32)]
        int[] h_h=filter(bh,ah,xh);
        double[] ecg_h_temp=conv2(ecg_l,h_h);
        double max_ecg_h_temp=maxDouble(absDInt(ecg_h_temp));
        double[] ecg_h=new double[ecg_h_temp.length];
        for (int i=0;i<ecg_h.length;i++){
            ecg_h[i]=ecg_h_temp[i]/max_ecg_h_temp;//high pass data
        }
        delay=delay+16;

        //derivative filter
        double[] h_d={-1, -2, 0, 2, 1};
        for (int i=0;i<h_d.length;i++){
            h_d[i]=h_d[i]/8.0;
        }
        double[] ecg_d_temp=conv3(ecg_h,h_d);
        double max_ecg_d_temp=maxDouble(ecg_d_temp);
        double[] ecg_d=new double[ecg_d_temp.length];
        for (int i=0;i<ecg_h.length;i++){
            ecg_d[i]=ecg_d_temp[i]/max_ecg_d_temp;//derivative data
        }
        delay=delay+2;

        //squaring
        double[] ecg_s=new double[ecg_d.length];
        for (int i=0;i<ecg_s.length;i++){
            ecg_s[i]=ecg_d[i]*ecg_d[i];
        }

        //moving average
        int[] h_m_temp=ones(round(0.15*fs));
        double[] h_m=new double[h_m_temp.length];
        for (int i=0;i<h_m.length;i++){
            h_m[i]=(double)h_m_temp[i]/(double)round(0.15*fs);
        }
        double[] ecg_m=conv3(ecg_s,h_m);//moving avg data
        delay=delay+15;

        //Fiducial Mark
        int[] locs=findpeaksLoc(ecg_m,round(0.2*fs));
        double[] pks=findpeakVal(ecg_m,round(0.2*fs));

        //initialize the training phase (2 seconds of the signal) to determine the THR_SIG and THR_NOISE
        double THR_SIG=maxDouble(Arrays.copyOfRange(ecg_m,1-1,2*fs-1))/3.0;
        double THR_NOISE=meanDouble(Arrays.copyOfRange(ecg_m,1-1,2*fs-1))/2.0;
        double SIG_LEV = THR_SIG;
        double NOISE_LEV = THR_NOISE;

        //Initialize bandpath filter threshold(2 seconds of the bandpass signal)
        double THR_SIG1=maxDouble(Arrays.copyOfRange(ecg_h,1-1,2*fs-1))/3.0;
        double THR_NOISE1=meanDouble(Arrays.copyOfRange(ecg_h,1-1,2*fs-1))/2.0;
        double SIG_LEV1 = THR_SIG1;
        double NOISE_LEV1 = THR_NOISE1;
        double y_i=0;
        double x_i=0;

        //Initialize
        double[] qrs_c=new double[0];
        int[] qrs_i=new int[0];
        double mean_RR=0;
        double m_selected_RR=0;
        double test_m=0;
        double[] qrs_i_raw=new double[0];
        double[] qrs_amp_raw=new double[0];
        double[] nois_c=new double[0];
        double[] nois_i=new double[0];
        int skip=0;
        int not_nois=0;
        int ser_back=0;
        double[] SIGL_buf=new double[0];
        double[] NOISL_buf=new double[0];
        double[] THRL_buf=new double[0];
        double[] SIGL_buf1=new double[0];
        double[] NOISL_buf1=new double[0];
        double[] THRL_buf1=new double[0];

        //Thresholding and online desicion rule
        for (int i=0;i<pks.length;i++){

            //locate the corresponding peak in the filtered signal
            if ((locs[i]-round(0.150*fs)>=1)&&(locs[i]<=ecg_h.length)){
                y_i=maxDouble(Arrays.copyOfRange(ecg_h,locs[i]-round(0.150*fs),locs[i]));
                x_i=imaxDouble(Arrays.copyOfRange(ecg_h,locs[i]-round(0.150*fs),locs[i]));
            }
            else if (i==0){
                y_i=maxDouble(Arrays.copyOfRange(ecg_h,0,locs[i]));
                x_i=imaxDouble(Arrays.copyOfRange(ecg_h,0,locs[i]));
            }
            else if (locs[i]>=ecg_h.length-1){
                y_i=maxDouble(Arrays.copyOfRange(ecg_h,locs[i]-round(0.150*fs),ecg_h.length-1));
                x_i=imaxDouble(Arrays.copyOfRange(ecg_h,locs[i]-round(0.150*fs),ecg_h.length-1));
            }

            //update the heart_rate (Two heart rate means one the moste recent and the other selected)
            if (qrs_c.length>=9){
                int[] diffRR=diffInt(Arrays.copyOfRange(qrs_i,qrs_i.length-8-1,qrs_i.length-1));
                mean_RR=(double) meanInt(diffRR);
                int comp=qrs_i[qrs_i.length-1]-qrs_i[qrs_i.length-1-1];
                if ((comp<=0.92*mean_RR)||(comp>=1.16*mean_RR)){
                    //lower down thresholds to detect better in MVI
                    THR_SIG=0.5*THR_SIG;
                    //lower down thresholds to detect better in Bandpass filtered
                    THR_SIG1 = 0.5*THR_SIG1;
                }
                else {
                    m_selected_RR=mean_RR;
                }
            }

            //calculate the mean of the last 8 R waves to make sure that QRS is not missing
            //(If no R detected , trigger a search back) 1.66*mean
            if (m_selected_RR!=0){
                test_m=m_selected_RR;
            }
            else if ((mean_RR!=0)&&(m_selected_RR==0)){
                test_m=mean_RR;
            }
            else {
                test_m=0;
            }
            if (test_m!=0){
                if ((locs[i]-qrs_i[qrs_i.length-1])>=round(1.66*test_m)){
                    double pks_temp=maxDouble(Arrays.copyOfRange(ecg_m,qrs_i[qrs_i.length-1]+round(0.200*fs),locs[i]-round(0.200*fs)));
                    double locs_temp=imaxDouble(Arrays.copyOfRange(ecg_m,qrs_i[qrs_i.length-1]+round(0.200*fs),locs[i]-round(0.200*fs)));
                    locs_temp=qrs_i[qrs_i.length-1]+round(0.200*fs)+locs_temp-1-1;
                    if (pks_temp>THR_NOISE){
                        qrs_c=Arrays.copyOf(qrs_c,qrs_c.length+1);
                        qrs_c[qrs_c.length-1]=pks_temp;
                        double y_i_t;
                        double x_i_t;
                        if (locs_temp<=ecg_h.length-1){
                            y_i_t=maxDouble(Arrays.copyOfRange(ecg_h,(int)(locs_temp-round(0.150*fs)),(int)locs_temp));
                            x_i_t=imaxDouble(Arrays.copyOfRange(ecg_h,(int)(locs_temp-round(0.150*fs)),(int)locs_temp));
                        }
                        else{
                            y_i_t=maxDouble(Arrays.copyOfRange(ecg_h,(int)(locs_temp-round(0.150*fs)),ecg_h.length-1));
                            x_i_t=imaxDouble(Arrays.copyOfRange(ecg_h,(int)(locs_temp-round(0.150*fs)),ecg_h.length-1));
                        }
                        if (y_i_t>THR_NOISE1){
                            SIG_LEV1=0.25*y_i_t+0.75*SIG_LEV1;
                            qrs_i_raw=Arrays.copyOf(qrs_i_raw,qrs_i_raw.length+1);
                            qrs_i_raw[qrs_i_raw.length-1]=locs_temp-round(0.15*fs)+(x_i_t-1);
                            qrs_amp_raw=Arrays.copyOf(qrs_amp_raw,qrs_amp_raw.length+1);
                            qrs_amp_raw[qrs_amp_raw.length-1]=y_i_t;
                        }
                        not_nois=1;
                        SIG_LEV=0.25*pks_temp+0.75*SIG_LEV;
                    }
                    else {not_nois=0;};
                }
            }

            //find noise and QRS peaks
            if (pks[i]>=THR_SIG){
                //if a QRS candidate occurs within 360ms of the previous QRS
                //the algorithm determines if its T wave or QRS
                if (qrs_c.length>=3){
                    if ((locs[i]-qrs_i[qrs_i.length-1])<=(round(0.3600*fs))){
                        double Slope1 =meanDouble(diffDouble(Arrays.copyOfRange(ecg_m,locs[i]-round(0.075*fs),locs[i])));
                        double Slope2 =meanDouble(diffDouble(Arrays.copyOfRange(ecg_m,qrs_i[qrs_i.length-1]-round(0.075*fs),qrs_i[qrs_i.length-1])));
                        if (absDoubleNum(Slope1)<=absDoubleNum(Slope2)){
                            nois_c=Arrays.copyOf(nois_c,nois_c.length+1);
                            nois_c[nois_c.length-1]=pks[i];
                            nois_i=Arrays.copyOf(nois_i,nois_i.length+1);
                            nois_i[nois_i.length-1]=locs[i];
                            skip=1;
                            NOISE_LEV1=0.125*y_i + 0.875*NOISE_LEV1;
                            NOISE_LEV = 0.125*pks[i] + 0.875*NOISE_LEV;
                        }
                        else {skip=0;}
                    }
                }
                if (skip==0){
                    qrs_c=Arrays.copyOf(qrs_c,qrs_c.length+1);
                    qrs_c[qrs_c.length-1]=pks[i];
                    qrs_i=Arrays.copyOf(qrs_i,qrs_i.length+1);
                    qrs_i[qrs_i.length-1]=locs[i];
                    if (y_i>=THR_SIG1){
                        if (ser_back!=0){
                            qrs_i_raw=Arrays.copyOf(qrs_i_raw,qrs_i_raw.length+1);
                            qrs_i_raw[qrs_i_raw.length-1]=x_i;
                        }
                        else {
                            qrs_i_raw=Arrays.copyOf(qrs_i_raw,qrs_i_raw.length+1);
                            qrs_i_raw[qrs_i_raw.length-1]=locs[i]-round(0.150*fs)+(x_i-1);
                        }
                        qrs_amp_raw=Arrays.copyOf(qrs_amp_raw,qrs_amp_raw.length+1);
                        qrs_amp_raw[qrs_amp_raw.length-1]=y_i;
                        SIG_LEV1 = 0.125*y_i + 0.875*SIG_LEV1;
                    }
                    SIG_LEV = 0.125*pks[i] + 0.875*SIG_LEV ;
                }
            }
            else if ((THR_NOISE <= pks[i]) && (pks[i]<THR_SIG)){
                NOISE_LEV1 = 0.125*y_i + 0.875*NOISE_LEV1;
                NOISE_LEV = 0.125*pks[i] + 0.875*NOISE_LEV;
            }
            else if (pks[i] < THR_NOISE){
                nois_c=Arrays.copyOf(nois_c,nois_c.length+1);
                nois_c[nois_c.length-1]=pks[i];
                nois_i=Arrays.copyOf(nois_i,nois_i.length+1);
                nois_i[nois_i.length-1]=locs[i];
                NOISE_LEV1 = 0.125*y_i + 0.875*NOISE_LEV1;
                NOISE_LEV = 0.125*pks[i] + 0.875*NOISE_LEV;
            }

            // adjust the threshold with SNR
            if ((NOISE_LEV!=0)||(SIG_LEV!=0)){
                THR_SIG=NOISE_LEV+0.25*(absDoubleNum(SIG_LEV-NOISE_LEV));
                THR_NOISE = 0.5*(THR_SIG);
            }
            if ((NOISE_LEV1!=0)||(SIG_LEV1!=0)){
                THR_SIG1=NOISE_LEV1 + 0.25*(absDoubleNum(SIG_LEV1 - NOISE_LEV1));
                THR_NOISE1 = 0.5*(THR_SIG1);
            }
            SIGL_buf=Arrays.copyOf(SIGL_buf,SIGL_buf.length+1);
            SIGL_buf[SIGL_buf.length-1]=SIG_LEV;
            NOISL_buf=Arrays.copyOf(NOISL_buf,NOISL_buf.length+1);
            NOISL_buf[NOISL_buf.length-1]=NOISE_LEV;
            THRL_buf=Arrays.copyOf(THRL_buf,THRL_buf.length+1);
            THRL_buf[THRL_buf.length-1]=THR_SIG;

            SIGL_buf1=Arrays.copyOf(SIGL_buf1,SIGL_buf1.length+1);
            SIGL_buf1[SIGL_buf1.length-1]=SIG_LEV1;
            NOISL_buf1=Arrays.copyOf(NOISL_buf1,NOISL_buf1.length+1);
            NOISL_buf1[NOISL_buf1.length-1]=NOISE_LEV1;
            THRL_buf1=Arrays.copyOf(THRL_buf1,THRL_buf1.length+1);
            THRL_buf1[THRL_buf1.length-1]=THR_SIG1;

            skip = 0; //reset parameters
            not_nois = 0; //reset parameters
            ser_back = 0;  //reset bandpass param
        }
        return qrs_i_raw;
    }
double[] square=pan_tompkin(DemoData);
//    int[] pks=findpeaksloc2(square,round(0.2*fs));
//int[] f=findpeaksLoc(DemoData,round(0.2*fs));

}

